// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String   @unique
  email   String   @unique
  resumes Resume[]
}

model Resume {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  title           String
  name            String   @default("")
  email           String   @default("")
  contact         String   @default("")
  introduction    String[] @db.Text
  educationalQual String[] @db.Text
  professionalExp Json[] 
  skills          String[] @db.Text
  projects        Json[] 
  awards String[] @db.Text

  analysis Analysis?
  //same combination, so these two can be uniquely paired to identify any resume.

  @@unique([userId, id]) //userId and id together should be unique, as no two resumes can have the
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resumeId String @unique
  resume   Resume @relation(fields: [resumeId], references: [id])
  strengths String[]
  weaknesses String[]
  opportunities String[]
  threats String[]
  projectRating String[]
  overallRating String[]
}
